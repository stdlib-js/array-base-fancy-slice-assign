{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMostlySafeCast = require( '@stdlib/array-base-assert-is-mostly-safe-data-type-cast' );\nvar normalizeSlice = require( '@stdlib/slice-base-normalize-slice' );\nvar sliceLength = require( '@stdlib/slice-base-length' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' ).ndarray;\nvar format = require( '@stdlib/string-format' );\n\n\n// MODULES //\n\n/**\n* Assigns element values from a broadcasted input array to corresponding elements in an output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {Slice} s - slice object\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} input array must be broadcast compatible with an output array view\n* @throws {TypeError} input array cannot be safely cast to the output array data type\n* @returns {Collection} output array\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n*\n* var x = [ 1, 2, 3, 4 ];\n* var y = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var out = sliceAssign( x, y, s, false );\n* // returns [ 0, 4, 0, 3, 0, 2, 0, 1 ]\n*\n* var bool = ( out === y );\n* // returns true\n*\n* @example\n* var Int32Array = require( '@stdlib/array-int32' );\n* var Slice = require( '@stdlib/slice-ctor' );\n*\n* var x = new Int32Array( [ 5 ] );\n* var y = new Int32Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var out = sliceAssign( x, y, s, false );\n* // returns <Int32Array>[ 0, 5, 0, 5, 0, 5, 0, 5 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction sliceAssign( x, y, s, strict ) {\n\tvar xlen;\n\tvar ylen;\n\tvar xdt;\n\tvar ydt;\n\tvar ns;\n\tvar xs;\n\tvar N;\n\n\txdt = dtype( x ) || 'generic';\n\tydt = dtype( y ) || 'generic';\n\n\txlen = x.length;\n\tylen = y.length;\n\n\t// Safe casts are always allowed and allow same kind casts (i.e., downcasts) only when the output data type is floating-point...\n\tif ( !isMostlySafeCast( xdt, ydt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Input array values cannot be safely cast to the output array data type. Data types: [%s, %s].', xdt, ydt ) );\n\t}\n\t// Normalize the slice object base on the output array length:\n\tns = normalizeSlice( s, ylen, true );\n\n\t// Check whether the slice exceeds the array bounds...\n\tif ( ns.code ) {\n\t\tif ( strict ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Slice exceeds array bounds. Array length: %d.', ylen ) );\n\t\t}\n\t\t// Normalize again, this time allowing for out-of-bounds indices:\n\t\tns = normalizeSlice( s, ylen, false );\n\t}\n\t// Compute the slice length:\n\tN = sliceLength( ns );\n\n\t// Broadcast the input array:\n\tif ( xlen === 1 ) {\n\t\txs = 0;\n\t} else if ( xlen === N ) {\n\t\txs = 1;\n\t} else {\n\t\tthrow new Error( format( 'invalid argument. Input array and the output array slice are broadcast incompatible. Array length: %u. Desired length: %u.', xlen, N ) );\n\t}\n\t// Copy elements to the output array:\n\tgcopy( N, x, xs, 0, y, ns.step, ns.start );\n\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceAssign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Assign element values from a broadcasted input array to corresponding elements in an output array.\n*\n* @module @stdlib/array-base-fancy-slice-assign\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var sliceAssign = require( '@stdlib/array-base-fancy-slice-assign' );\n*\n* var x = [ 1, 2, 3, 4 ];\n* var y = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var out = sliceAssign( x, y, s, false );\n* // returns [ 0, 4, 0, 3, 0, 2, 0, 1 ]\n*\n* var bool = ( out === y );\n* // returns true\n*\n* @example\n* var Int32Array = require( '@stdlib/array-int32' );\n* var Slice = require( '@stdlib/slice-ctor' );\n* var sliceAssign = require( '@stdlib/array-base-fancy-slice-assign' );\n*\n* var x = new Int32Array( [ 5 ] );\n* var y = new Int32Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\n*\n* var s = new Slice( null, null, -2 );\n* // returns <Slice>\n*\n* var out = sliceAssign( x, y, s, false );\n* // returns <Int32Array>[ 0, 5, 0, 5, 0, 5, 0, 5 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,yDAA0D,EACtFC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAc,QAAS,2BAA4B,EACnDC,EAAQ,QAAS,qBAAsB,EACvCC,EAAQ,QAAS,yBAA0B,EAAE,QAC7CC,EAAS,QAAS,uBAAwB,EAgD9C,SAASC,EAAaC,EAAGC,EAAGC,EAAGC,EAAS,CACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EASJ,GAPAJ,EAAMV,EAAOI,CAAE,GAAK,UACpBO,EAAMX,EAAOK,CAAE,GAAK,UAEpBG,EAAOJ,EAAE,OACTK,EAAOJ,EAAE,OAGJ,CAACR,EAAkBa,EAAKC,CAAI,EAChC,MAAM,IAAI,UAAWT,EAAQ,kHAAmHQ,EAAKC,CAAI,CAAE,EAM5J,GAHAC,EAAKd,EAAgBQ,EAAGG,EAAM,EAAK,EAG9BG,EAAG,KAAO,CACd,GAAKL,EACJ,MAAM,IAAI,WAAYL,EAAQ,kEAAmEO,CAAK,CAAE,EAGzGG,EAAKd,EAAgBQ,EAAGG,EAAM,EAAM,CACrC,CAKA,GAHAK,EAAIf,EAAaa,CAAG,EAGfJ,IAAS,EACbK,EAAK,UACML,IAASM,EACpBD,EAAK,MAEL,OAAM,IAAI,MAAOX,EAAQ,6HAA8HM,EAAMM,CAAE,CAAE,EAGlK,OAAAb,EAAOa,EAAGV,EAAGS,EAAI,EAAGR,EAAGO,EAAG,KAAMA,EAAG,KAAM,EAElCP,CACR,CAKAT,EAAO,QAAUO,IChEjB,IAAIY,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isMostlySafeCast", "normalizeSlice", "sliceLength", "dtype", "gcopy", "format", "sliceAssign", "x", "y", "s", "strict", "xlen", "ylen", "xdt", "ydt", "ns", "xs", "N", "main"]
}
